{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","addCategories","useState","inputState","setInputState","onSubmit","e","preventDefault","length","type","value","onChange","target","getGifs","category","a","encodedCategory","encodeURI","url","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","setCategories","newCategory","ReactDOM","render","document","getElementById"],"mappings":"2MAmCeA,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAiBvC,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAS,IACpBP,EAAcE,GACdC,EAAc,MAKlB,SACI,uBACIK,KAAK,OACLC,MAAQP,EACRQ,SAlBa,SAACL,GACtBF,EAAcE,EAAEM,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,yBAAAC,EAAA,6DACbC,EAAkBC,UAAUH,GAC5BI,EAFa,0FAE4EF,EAF5E,sBAGAG,MAAMD,GAHN,cAGbE,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,QAIzCY,QAAQC,IAAI,OAAQR,GAdD,kBAgBZA,GAhBY,4CAAH,sDCULS,EAVK,SAAC,GAAsB,EAArBN,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAE7B,OACI,sBAAKe,UAAU,yCAAf,UACI,4BAAIN,IACJ,qBAAKO,IAAKhB,EAAKiB,IAAKR,QCYhBS,EAfC,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,ECAP,SAACA,GACzB,IADsC,EAMZZ,mBALN,CAChBoB,KAAM,GACNe,SAAS,IAHyB,mBAM/BC,EAN+B,KAMxBC,EANwB,KAgBtC,OARAC,qBAAW,WACP3B,EAAQC,GAAU2B,MAAK,SAAAlB,GAAI,OAAIgB,EAAS,CACpCjB,KAAMC,EACNc,SAAS,SAEd,CAACvB,IAGGwB,EDd0BI,CAAa5B,GAAjCc,EAFkB,EAEvBN,KAAae,EAFU,EAEVA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDnB,IACpD,mBAAGmB,UAAU,mCAAb,SAAiDI,GAAW,eAC5D,qBAAKJ,UAAU,YAAf,SACML,EAAOJ,KAAK,SAACC,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEgB9CiB,EAxBM,WAEjB,IAFuB,EAIczC,mBAFX,CAAC,cAFJ,mBAIhB0C,EAJgB,KAIJC,EAJI,KAUvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAa5C,cAPH,SAAC6C,GACfD,EAAc,CAACC,GAAF,mBAAkBF,QAO3B,uBAEIA,EAAWpB,KAAI,SAAAV,GAAQ,OACnB,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,UCflCiC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.462dac3c.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ addCategories }) => {\r\n\r\n    const [inputState, setInputState] = useState('');\r\n\r\n    const handleInputValue = (e) => {\r\n        setInputState(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputState.length > 2) {\r\n            addCategories(inputState);\r\n            setInputState('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputState }\r\n                onChange={ handleInputValue } />\r\n        </form>\r\n    )\r\n \r\n}\r\n\r\nAddCategory.propTypes = {\r\n    addCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\nexport const getGifs = async(category) => {\r\n    const encodedCategory = encodeURI(category);\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=mPzwKvb5MwyM6CMiQk8MVjJTTgxEy8Oz&q=${encodedCategory}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( gif => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    console.log('gifs', gifs);\r\n\r\n    return gifs;\r\n}","\r\nconst GifGridItem = ({id, title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <p>{title}</p>\r\n            <img src={url} alt={title}></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\n const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            <p className=\"animate__animated animate__flash\">{loading && 'Loading...'}</p>\r\n            <div className=\"card-grid\">\r\n                { images.map( (gif) => <GifGridItem key={gif.id} {...gif} /> ) }\r\n            </div>\r\n        </>\r\n    )\r\n }\r\n\r\n export default GifGrid;","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const initialData = {\r\n        data: [],\r\n        loading: true\r\n    }\r\n\r\n    const [state, setState] = useState(initialData);\r\n\r\n    useEffect( () => {\r\n        getGifs(category).then(gifs => setState({\r\n            data: gifs,\r\n            loading: false\r\n        }));\r\n    }, [category] );\r\n\r\n\r\n    return state;\r\n}","import { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const initialCategories = ['One Punch'];\r\n\r\n    const [categories, setCategories ] = useState(initialCategories);\r\n\r\n    const handleAdd = (newCategory) => {\r\n        setCategories([newCategory, ...categories]);\r\n    } \r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>            \r\n            <AddCategory addCategories={ handleAdd }/>\r\n            <hr />\r\n            {\r\n                categories.map(category => \r\n                    <GifGrid key={category} category={ category }/>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}